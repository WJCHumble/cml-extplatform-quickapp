<template>
  <div>
    <input 
      type="button" 
      value="{{text}}" 
      onclick="clickHandler" 
      style="width: {{ width > 0 ? width+'px' : 'initial' }};background-color: {{type}};{{btnStyle}}">
    </input>
  </div>
</template>

<script>
  import {
    transCls
  } from '../util'

  class Button implements ButtonInterface {
    data = {
      hover: false
    }
    props = {
      text: {
        type: String,
        default: ""
      },
      size: {
        type: String,
        default: "stretch"
      },
      width: {
        type: Number,
        default: -1
      },
      type: {
        type: String,
        default: "blue"
      },
      disabled: {
        type: Boolean,
        default: false
      },
      btnStyle: {
        type: String,
        default: ""
      },
      textStyle: {
        type: String,
        default: ""
      },
      textStyleDisabled: {
        type: String,
        default: ""
      },
      disabledStyle: {
        type: String,
        default: ""
      },
      btnHoverStyle: {
        type: String,
        default: ''
      },
      textHoverStyle: {
        type: String,
        default: ''
      },
    }
    computed = {
      hasWidth() {
        return this.width !== -1
      },
      btnClasses() {
        return transCls('cml-view cml-btn', this)
      },
      textClasses() {
        return transCls('btn-text', this)
      },
      mrBtnStyle() {
        const {
          disabled,
          btnStyle,
          disabledStyle,
          hover,
          btnHoverStyle,
          hasWidth,
          width
        } = this;

        let style = disabled ?
          `${btnStyle};${disabledStyle}` :
          hover ?
          `${btnStyle};${btnHoverStyle}` :
          btnStyle

        if (hasWidth) {
          style = `width:${width}cpx;${style}`
        }
        return style
      },
      mrTextStyle() {
        const {
          disabled,
          textStyle,
          textStyleDisabled,
          hover,
          textHoverStyle
        } = this;
        return disabled ?
          `${textStyle};${textStyleDisabled}` :
          hover ?
          `${textStyle};${textHoverStyle}` :
          textStyle
      }
    }
    methods = {
      clickHandler(e) {
        debugger
        const {
          type,
          disabled
        } = this
        if (disabled) return;
        this.$cmlEmit('onclick', {
          type,
          disabled
        });
      },
      touchstart(e) {
        this.hover = true
      },
      touchend(e) {
        this.hover = false
      },
      error(e) {
        this.$cmlEmit('error', {
          errMsg: e.detail.errMsg
        });
      },
    }
  }
  export default new Button();
</script>
<style>
</style>
<script cml-type="json">
  {}
</script>