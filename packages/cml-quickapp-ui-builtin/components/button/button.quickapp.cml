<template>
  <div 
    class="{{btnClasses}}" 
    style="{{mrBtnStyle}}" 
    c-bind:tap="onclick" 
    open-type="{{openType}}" 
    lang="{{lang}}">
      <text c-if="{{text}}" class="{{textClasses}}" style="{{mrTextStyle}}">{{text}}</text>
  </div>
</template>

<script>
  import {
    transCls
  } from './util'

  class Button implements ButtonInterface {
    props = {
      text: {
        type: String,
        default: ""
      },
      size: {
        type: String,
        default: "stretch"
      },
      width: {
        type: Number,
        default: -1
      },
      type: {
        type: String,
        default: "blue"
      },
      disabled: {
        type: Boolean,
        default: false
      },
      btnStyle: {
        type: String,
        default: ""
      },
      textStyle: {
        type: String,
        default: ""
      },
      textStyleDisabled: {
        type: String,
        default: ""
      },
      disabledStyle: {
        type: String,
        default: ""
      },
      btnHoverStyle: {
        type: String,
        default: ''
      },
      textHoverStyle: {
        type: String,
        default: ''
      },
      openType: {
        type: String,
        default: ""
      },
      lang: {
        type: String,
        default: "en"
      },
      sessionFrom: {
        type: String,
        default: ""
      },
      sendMessageTitle: {
        type: String,
        default: "当前标题"
      },
      sendMessagePath: {
        type: String,
        default: "当前分享路径"
      },
      sendMessageImg: {
        type: String,
        default: "截图"
      },
      showMessageCard: {
        type: Boolean,
        default: false
      },
      appParameter: {
        type: String,
        default: ""
      }
    }
    data = {
      hover: false
    }
    computed = {
      hasWidth() {
        return this.width !== -1
      },
      btnClasses() {
        return transCls('cml-view cml-btn', this)
      },
      textClasses() {
        return transCls('btn-text', this)
      },
      mrBtnStyle() {
        const {
          disabled,
          btnStyle,
          disabledStyle,
          hover,
          btnHoverStyle,
          hasWidth,
          width
        } = this;

        let style = disabled ?
          `${btnStyle};${disabledStyle}` :
          hover ?
          `${btnStyle};${btnHoverStyle}` :
          btnStyle

        if (hasWidth) {
          style = `width:${width}cpx;${style}`
        }
        return style
      },
      mrTextStyle() {
        const {
          disabled,
          textStyle,
          textStyleDisabled,
          hover,
          textHoverStyle
        } = this;
        return disabled ?
          `${textStyle};${textStyleDisabled}` :
          hover ?
          `${textStyle};${textHoverStyle}` :
          textStyle
      }
    }
    methods = {
      onclick(e) {

        const {
          type,
          disabled
        } = this
        if (disabled) return;
        this.$cmlEmit('onclick', {
          type,
          disabled
        });
      },
      touchstart(e) {
        this.hover = true
      },
      touchend(e) {
        this.hover = false
      },
      getuserinfo(e) {
        this.$cmlEmit('getuserinfo', e.detail);
      },
      contact(e) {
        this.$cmlEmit('contact');
      },
      getphonenumber(e) {
        this.$cmlEmit('getphonenumber', {
          errMsg: e.detail.errMsg,
          encryptedData: e.detail.encryptedData || '',
          //包括敏感数据在内的完整用户信息的加密数据
          iv: e.detail.iv || ''
          //加密算法的初始向量
        });
      },
      error(e) {
        this.$cmlEmit('error', {
          errMsg: e.detail.errMsg
        });
      },
      opensetting(e) {
        this.$cmlEmit('opensetting');
      }
    }
  }
  export default new Button();
</script>
<style>
</style>
<script cml-type="json">
  {}
</script>